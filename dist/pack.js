/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EPSILON\": () => /* binding */ EPSILON,\n/* harmony export */   \"ARRAY_TYPE\": () => /* binding */ ARRAY_TYPE,\n/* harmony export */   \"RANDOM\": () => /* binding */ RANDOM,\n/* harmony export */   \"setMatrixArrayType\": () => /* binding */ setMatrixArrayType,\n/* harmony export */   \"toRadian\": () => /* binding */ toRadian,\n/* harmony export */   \"equals\": () => /* binding */ equals\n/* harmony export */ });\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n\n//# sourceURL=webpack://fractals/./node_modules/gl-matrix/esm/common.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"create\": () => /* binding */ create,\n/* harmony export */   \"clone\": () => /* binding */ clone,\n/* harmony export */   \"length\": () => /* binding */ length,\n/* harmony export */   \"fromValues\": () => /* binding */ fromValues,\n/* harmony export */   \"copy\": () => /* binding */ copy,\n/* harmony export */   \"set\": () => /* binding */ set,\n/* harmony export */   \"add\": () => /* binding */ add,\n/* harmony export */   \"subtract\": () => /* binding */ subtract,\n/* harmony export */   \"multiply\": () => /* binding */ multiply,\n/* harmony export */   \"divide\": () => /* binding */ divide,\n/* harmony export */   \"ceil\": () => /* binding */ ceil,\n/* harmony export */   \"floor\": () => /* binding */ floor,\n/* harmony export */   \"min\": () => /* binding */ min,\n/* harmony export */   \"max\": () => /* binding */ max,\n/* harmony export */   \"round\": () => /* binding */ round,\n/* harmony export */   \"scale\": () => /* binding */ scale,\n/* harmony export */   \"scaleAndAdd\": () => /* binding */ scaleAndAdd,\n/* harmony export */   \"distance\": () => /* binding */ distance,\n/* harmony export */   \"squaredDistance\": () => /* binding */ squaredDistance,\n/* harmony export */   \"squaredLength\": () => /* binding */ squaredLength,\n/* harmony export */   \"negate\": () => /* binding */ negate,\n/* harmony export */   \"inverse\": () => /* binding */ inverse,\n/* harmony export */   \"normalize\": () => /* binding */ normalize,\n/* harmony export */   \"dot\": () => /* binding */ dot,\n/* harmony export */   \"cross\": () => /* binding */ cross,\n/* harmony export */   \"lerp\": () => /* binding */ lerp,\n/* harmony export */   \"hermite\": () => /* binding */ hermite,\n/* harmony export */   \"bezier\": () => /* binding */ bezier,\n/* harmony export */   \"random\": () => /* binding */ random,\n/* harmony export */   \"transformMat4\": () => /* binding */ transformMat4,\n/* harmony export */   \"transformMat3\": () => /* binding */ transformMat3,\n/* harmony export */   \"transformQuat\": () => /* binding */ transformQuat,\n/* harmony export */   \"rotateX\": () => /* binding */ rotateX,\n/* harmony export */   \"rotateY\": () => /* binding */ rotateY,\n/* harmony export */   \"rotateZ\": () => /* binding */ rotateZ,\n/* harmony export */   \"angle\": () => /* binding */ angle,\n/* harmony export */   \"zero\": () => /* binding */ zero,\n/* harmony export */   \"str\": () => /* binding */ str,\n/* harmony export */   \"exactEquals\": () => /* binding */ exactEquals,\n/* harmony export */   \"equals\": () => /* binding */ equals,\n/* harmony export */   \"sub\": () => /* binding */ sub,\n/* harmony export */   \"mul\": () => /* binding */ mul,\n/* harmony export */   \"div\": () => /* binding */ div,\n/* harmony export */   \"dist\": () => /* binding */ dist,\n/* harmony export */   \"sqrDist\": () => /* binding */ sqrDist,\n/* harmony export */   \"len\": () => /* binding */ len,\n/* harmony export */   \"sqrLen\": () => /* binding */ sqrLen,\n/* harmony export */   \"forEach\": () => /* binding */ forEach\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction fromValues(x, y, z) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://fractals/./node_modules/gl-matrix/esm/vec3.js?");

/***/ }),

/***/ "./src/editFrag.fs":
/*!*************************!*\
  !*** ./src/editFrag.fs ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"#ifdef GL_ES\\r\\nprecision highp float;\\r\\n#endif\\r\\n\\r\\nuniform vec3 playerPos;\\r\\nuniform vec3 playerFwd;\\r\\nuniform vec3 playerRight;\\r\\nuniform vec3 playerUp;\\r\\nuniform vec2 resolution;\\r\\n\\r\\nuniform int shadow_count;\\r\\nuniform int render_count;\\r\\nuniform float detail;\\r\\n\\r\\nconst float scaleEpsilon = 0.001;\\r\\n\\r\\nfloat box(vec3 p, vec3 center, vec3 b)\\r\\n{\\r\\n    vec3 q = abs(p - center) - b;\\r\\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\\r\\n}\\r\\n\\r\\nfloat sphere(vec3 p, vec3 center, float s)\\r\\n{\\r\\n    return length(p - center) - s;\\r\\n}\\r\\n\\r\\nvoid sphere_fold(inout vec4 z, float min_radius, float fixed_radius) {\\r\\n    z *= fixed_radius / clamp(dot(z.xyz, z.xyz), min_radius, fixed_radius);\\r\\n}\\r\\n\\r\\nvoid box_fold(inout vec4 z, float folding_limit) {\\r\\n    z.xyz = clamp(z.xyz, - folding_limit, folding_limit) * 2.0 - z.xyz;\\r\\n}\\r\\n\\r\\nvoid shiftXY(inout vec4 z, float angle, float radius) {\\r\\n    float c = cos(angle);\\r\\n    float s = sin(angle);\\r\\n    z = vec4(vec2(c, s) * radius + z.xy, z.zw);\\r\\n}\\r\\nvoid invertRadius(inout vec4 z, float radius2, float limit) {\\r\\n    float r2 = dot(z.xyz, z.xyz);\\r\\n    float f = clamp(radius2 / r2, 1.0, limit);\\r\\n    z *= f;\\r\\n}\\r\\nvoid rotateZ(inout vec4 z, float angle) {\\r\\n    float c = cos(angle);\\r\\n    float s = sin(angle);\\r\\n    vec4 rotated = z;\\r\\n    rotated.x = z.x * c-z.y * s;\\r\\n    rotated.y = z.y * c+z.x * s;\\r\\n    z = rotated;\\r\\n}\\r\\nvoid rotateY(inout vec4 z, float angle) {\\r\\n    float c = cos(angle);\\r\\n    float s = sin(angle);\\r\\n    vec4 rotated = z;\\r\\n    rotated.x = z.x * c-z.z * s;\\r\\n    rotated.z = z.z * c+z.x * s;\\r\\n    z = rotated;\\r\\n}\\r\\nvoid rotateX(inout vec4 z, float angle) {\\r\\n    float c = cos(angle);\\r\\n    float s = sin(angle);\\r\\n    vec4 rotated = z;\\r\\n    rotated.z = z.z * c-z.y * s;\\r\\n    rotated.y = z.y * c+z.z * s;\\r\\n    z = rotated;\\r\\n}\\r\\n\\r\\nvoid rotate(inout vec4 z, vec3 angle) {\\r\\n    rotateX(z, angle.x);\\r\\n    rotateY(z, angle.y);\\r\\n    rotateZ(z, angle.z);\\r\\n}\\r\\n\\r\\nvoid translate(inout vec4 z, vec3 transform) {\\r\\n    z.xyz += transform;\\r\\n}\\r\\nvoid scale(inout vec4 z, float transform) {\\r\\n    z *= transform;\\r\\n}\\r\\nvoid tetrahedral(inout vec4 z) {\\r\\n    if (z.x + z.y < 0.0)z.xy =- z.yx; // fold 1\\r\\n    if (z.x + z.z < 0.0)z.xz =- z.zx; // fold 2\\r\\n    if (z.y + z.z < 0.0)z.zy =- z.yz; // fold 3\\r\\n}\\r\\n\\r\\n// void mendelbox(inout vec4 z,vec3 pos){\\r\\n    //     //box_fold(z);\\r\\n    //     //sphere_fold(z);\\r\\n    //    // z.xyz=scale*z.xyz+pos;\\r\\n    //     z.w=z.w*abs(scale)+1.;\\r\\n// }\\r\\n\\r\\nvoid mandel(inout vec4 z, vec3 pos, float scale) {\\r\\n    z.xyz = scale * z.xyz + pos;\\r\\n    z.w = z.w * abs(scale) + 1.0;\\r\\n}\\r\\n\\r\\n// void sharpbox(inout vec4 z){\\r\\n    //     tetrahedral(z);\\r\\n    //     //box_fold(z);\\r\\n    //     rotateZ(z,10.);\\r\\n    //     //z*=scale;\\r\\n// }\\r\\n\\r\\nvoid menger(inout vec4 z, vec3 c, float scale) {\\r\\n    \\r\\n    z = abs(z);\\r\\n    if (z.x - z.y < 0.0) {z.xy = z.yx; }\\r\\n    if (z.x - z.z < 0.0) {z.xz = z.zx; }\\r\\n    if (z.y - z.z < 0.0) {z.yz = z.zy; }\\r\\n    \\r\\n    z.z -= 0.5 * c.z * (scale - 1.0) / scale;\\r\\n    z.z =- abs(-z.z);\\r\\n    \\r\\n    z.z += 0.5 * c.z * (scale - 1.0) / scale;\\r\\n    z *= scale;\\r\\n    z.x -= c.x * (scale - 1.0);\\r\\n    z.y -= c.y * (scale - 1.0);\\r\\n}\\r\\n\\r\\n// void menger_c(inout vec4 z,vec3 c,inout vec3 color){\\r\\n    //     rotateX(z,3.14159/3.);\\r\\n    //     z=abs(z);\\r\\n    //     if(z.x-z.y<0.){z.xy=z.yx;}\\r\\n    //     if(z.x-z.z<0.){z.xz=z.zx;}\\r\\n    //     if(z.y-z.z<0.){z.yz=z.zy;}\\r\\n    \\r\\n    //     z.z-=.5*c.z*(scale-1.)/scale;\\r\\n    //     float ozz=z.z;\\r\\n    //     z.z=-abs(-z.z);\\r\\n    //     if(ozz>z.z){\\r\\n        //         color.x++;\\r\\n    //     }\\r\\n    //     rotateZ(z,3.14159/60.);\\r\\n    //     rotateX(z,3.14159/30.);\\r\\n    \\r\\n    //     z.z+=.5*c.z*(scale-1.)/scale;\\r\\n    //     z*=scale;\\r\\n    //     z.x-=c.x*(scale-1.);\\r\\n    //     z.y-=c.y*(scale-1.);\\r\\n// }\\r\\n\\r\\nfloat map(vec3 pos) {\\r\\n    vec4 z = vec4(pos, 1.0);\\r\\n    INSERTFRACTALHERE\\r\\n}\\r\\n\\r\\nvec2 intersect(in vec3 ro, in vec3 rd, in float maxdist)\\r\\n{\\r\\n    float dist = 0.0;\\r\\n    for(int i = 0; i < 800; i ++ )\\r\\n    {\\r\\n        if (i == render_count)break;\\r\\n        vec3 rayP = ro + dist * rd;\\r\\n        float mapDist = map(rayP);\\r\\n        if (mapDist < (scaleEpsilon * dist + detail)||dist > maxdist) {\\r\\n            return vec2(dist, i);\\r\\n        }\\r\\n        dist += mapDist;\\r\\n    }\\r\\n    return vec2(dist, render_count);\\r\\n}\\r\\n\\r\\n//not mine------\\r\\nfloat softshadow(vec3 ro, vec3 rd, float k) {\\r\\n    float akuma = 1.0, h = 0.0;\\r\\n    float t = 0.001;\\r\\n    for(int i = 0; i < 50; ++ i) {\\r\\n        if (i >= shadow_count) {\\r\\n            return akuma;\\r\\n        }\\r\\n        h = map(ro + rd * t);\\r\\n        if (h < 0.0001)return.02;\\r\\n        akuma = min(akuma, k * h / t);\\r\\n        t += h;\\r\\n    }\\r\\n    return akuma;\\r\\n}\\r\\n//---------------\\r\\n\\r\\nvec3 calcNormal(vec3 p, float e) {\\r\\n    return normalize(vec3(map(vec3(p.x + e, p.y, p.z)) - map(vec3(p.x - e, p.y, p.z)), map(vec3(p.x, p.y + e, p.z)) - map(vec3(p.x, p.y - e, p.z)), map(vec3(p.x, p.y, p.z + e)) - map(vec3(p.x, p.y, p.z - e))));\\r\\n}\\r\\n\\r\\n// void sphere_fold_c(inout vec4 z,inout vec3 color){\\r\\n    //     float r2=dot(z.xyz,z.xyz);\\r\\n    //     color+=vec3(0,-.25,.15);\\r\\n    //     if(r2<min_radius){\\r\\n        //         z*=(fixed_radius/min_radius);\\r\\n        //         color+=vec3(0,2.25,1.75);\\r\\n    //     }else if(r2<fixed_radius){\\r\\n        //         z*=(fixed_radius/r2);\\r\\n        //         color+=vec3(.45,.6,2.2);\\r\\n    //     }\\r\\n// }\\r\\n\\r\\n// void box_fold_c(inout vec4 z,inout vec3 color){\\r\\n    //     vec3 pos=z.xyz;\\r\\n    //     z.xyz=clamp(z.xyz,-folding_limit,folding_limit);\\r\\n    //     color.x+=pos==z.xyz?float(recursions)/1.5:0.;\\r\\n    //     z.xyz=z.xyz*2.-pos;\\r\\n// }\\r\\n\\r\\nvec3 hsv2rgb(vec3 c) {\\r\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\r\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\r\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\r\\n}\\r\\n\\r\\nvec3 orbit_trap(vec3 pos) {\\r\\n    float orbit = 1000.0;\\r\\n    vec4 z = vec4(pos, 1.0);\\r\\n    for(int n = 0; n < 4; ++ n) {\\r\\n        box_fold(z, 1.0);\\r\\n        sphere_fold(z, 0.0, 1.0);\\r\\n        z.xyz = -2.0 * z.xyz + pos;\\r\\n        z.w = z.w * abs(-2.0) + 1.0;\\r\\n        orbit = min(orbit, abs(length(z.xyz) / z.w));\\r\\n    }\\r\\n    return hsv2rgb(vec3(orbit * 10.0, 0.5, 0.5));\\r\\n}\\r\\n\\r\\nvec3 map_color(vec3 pos) {\\r\\n    float orbit = 1000.0;\\r\\n    vec4 z = vec4(pos, 1.0);\\r\\n    INSERTCOLORHERE\\r\\n    //backup\\r\\n    return vec3(48.0 / 255.0, 204.0 / 255.0, 0.0);\\r\\n}\\r\\n\\r\\nvec3 render(in vec3 ro, in vec3 rd, bool effect)\\r\\n{\\r\\n    vec3 light = vec3(4, - 2, 1);\\r\\n    vec3 lightColor = vec3(0.5, 0.34, 0.26);\\r\\n    \\r\\n    vec2 rayData = intersect(ro, rd, 1024.0);\\r\\n    float dist = rayData.x;\\r\\n    \\r\\n    vec3 color = map_color(ro + rd * dist);\\r\\n    \\r\\n    if (dist > 1024.0||int(rayData.y) == render_count) {\\r\\n        return vec3(0.91, 0.91, 0.76) + vec3(smoothstep(0.98, 1.0, dot(rd, - normalize(light))));\\r\\n    }\\r\\n    \\r\\n    vec3 normal = calcNormal(ro + dist * rd, scaleEpsilon * dist + detail);\\r\\n    float specular = pow(dot(-normalize(rd), reflect(normalize(light), normal)), 32.0);\\r\\n    \\r\\n    float distOcclusion = 1.0 - rayData.y / float(render_count); //hacky occlusion, more occlusion means higher number\\r\\n    float diffuseLighting = 1.0 - clamp(dot(light, normal), 0.0, 1.0);\\r\\n    \\r\\n    float shadow = softshadow(ro + dist * rd, - light, 10.0);\\r\\n    specular *= shadow;\\r\\n    specular *= diffuseLighting;\\r\\n    return color * (diffuseLighting * 0.3 + distOcclusion * 0.2 + 0.3 * shadow) + vec3(0.1 + 0.5 * clamp(specular, 0.0, 1.0));\\r\\n}\\r\\n\\r\\nvoid main(void)\\r\\n{\\r\\n    vec2 screenPos =- 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy; // screenPos can range from -1 to 1\\r\\n    screenPos.x *= resolution.x / resolution.y;\\r\\n    \\r\\n    vec3 ro = playerPos;\\r\\n    vec3 rd = normalize(playerFwd + playerRight * screenPos.x + playerUp *- screenPos.y);\\r\\n    vec3 col = render(ro, rd, screenPos.x > 0.0);\\r\\n    gl_FragColor = vec4(col, 1.0);\\r\\n}\");\n\n//# sourceURL=webpack://fractals/./src/editFrag.fs?");

/***/ }),

/***/ "./src/generalVert.vs":
/*!****************************!*\
  !*** ./src/generalVert.vs ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"attribute vec2 position;\\r\\nvarying vec2 surf_pos;\\r\\nuniform vec2 screen_ratio;\\r\\nvoid main()\\r\\n{\\r\\n    surf_pos = position * screen_ratio;\\r\\n    gl_Position = vec4(position, 0, 1);\\r\\n}\");\n\n//# sourceURL=webpack://fractals/./src/generalVert.vs?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _generalVert_vs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generalVert.vs */ \"./src/generalVert.vs\");\n/* harmony import */ var _editFrag_fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editFrag.fs */ \"./src/editFrag.fs\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n\r\n\r\n\r\n\r\nvar lastX, lastY, mouseDown = false;\r\nvar yawAngle = 0, pitchAngle = 0;\r\nvar playerPos = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, -4);\r\nvar move = [0, 0, 0];\r\nvar speed = 3;\r\nvar saveTimer = 1;\r\nvar canvas = $(\"#canvas\")[0];\r\nvar gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n\r\nfunction fixCanvas() {\r\n    var rect = canvas.parentNode.getBoundingClientRect();\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    gl.uniform2f(resolution_location, canvas.width, canvas.height);\r\n    var mx = Math.max(canvas.width, canvas.height);\r\n    gl.uniform2f(screen_ratio_location, canvas.width / mx, canvas.height / mx);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n}\r\n\r\n//SHADER EDITOR ============================================\r\n$(\"#expand-button\").click(function () {\r\n    $(\"#editor\").toggleClass(\"expanded\");\r\n});\r\n$(\".list-button\").click(function () {\r\n    $('.list-button').removeClass('active');\r\n    $(this).addClass('active');\r\n    $(this).data('code');\r\n});\r\n$(\"#run\").click(function () {\r\n    run();\r\n});\r\nvar screen_ratio_location;\r\nvar resolution_location;\r\nvar playerPos_location;\r\nvar playerFwd_location;\r\nvar playerUp_location;\r\nvar playerRight_location;\r\nvar time_location;\r\nvar detail_location;\r\nvar shadow_location;\r\nvar render_location;\r\nvar vShader = gl.createShader(gl.VERTEX_SHADER);\r\ngl.shaderSource(vShader, _generalVert_vs__WEBPACK_IMPORTED_MODULE_0__.default);\r\ngl.compileShader(vShader);\r\nfunction run() {\r\n    var fractal = codify($('#fractal'));\r\n    var d = $('#draw-region').children().eq(0).val() + ',' + $('#draw-region').children().eq(1).val() + ',' + $('#draw-region').children().eq(2).val();\r\n    d = toFloats(d.split(','));\r\n    fractal += `return box(z.xyz,vec3(0),vec3(${d[0]},${d[1]},${d[2]}))/abs(z.w);\\n`;\r\n    //console.log(fractal);\r\n    var color = codify($('#color'));\r\n    console.log(color);\r\n    var Nfrag = _editFrag_fs__WEBPACK_IMPORTED_MODULE_1__.default.replace('INSERTFRACTALHERE', fractal);\r\n    Nfrag = Nfrag.replace('INSERTCOLORHERE', color);\r\n    //console.log(Nfrag);\r\n    //var program = gl.createProgram();\r\n    var fShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fShader, Nfrag);\r\n    gl.compileShader(fShader);\r\n    var compilationLog = gl.getShaderInfoLog(fShader);\r\n    console.log('Shader compiler log: ' + compilationLog);\r\n    var program = gl.createProgram();\r\n    gl.attachShader(program, vShader);\r\n    gl.attachShader(program, fShader);\r\n    gl.linkProgram(program);\r\n    gl.deleteShader(vShader);\r\n    gl.deleteShader(fShader);\r\n    gl.useProgram(program);\r\n    screen_ratio_location = gl.getUniformLocation(program, \"screen_ratio\");\r\n    var position_location = gl.getAttribLocation(program, \"position\");\r\n    resolution_location = gl.getUniformLocation(program, \"resolution\");\r\n    playerPos_location = gl.getUniformLocation(program, \"playerPos\");\r\n    playerFwd_location = gl.getUniformLocation(program, \"playerFwd\");\r\n    playerUp_location = gl.getUniformLocation(program, \"playerUp\");\r\n    playerRight_location = gl.getUniformLocation(program, \"playerRight\");\r\n    time_location = gl.getUniformLocation(program, \"time\");\r\n    shadow_location = gl.getUniformLocation(program, \"shadow_count\");\r\n    detail_location = gl.getUniformLocation(program, \"detail\");\r\n    render_location = gl.getUniformLocation(program, \"render_count\");\r\n    gl.uniform1f(detail_location, Math.pow(10, -$('#detail').val()));\r\n    gl.uniform1i(shadow_location, $('#shadow').val());\r\n    gl.uniform1i(render_location, $('#render').val());\r\n    var buffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0]), gl.STATIC_DRAW);\r\n    gl.enableVertexAttribArray(position_location);\r\n    gl.vertexAttribPointer(position_location, 2, gl.FLOAT, false, 0, 0);\r\n    fixCanvas();\r\n}\r\n\r\nfunction save() {\r\n    if (saveTimer >= 1) {\r\n        saveTimer = 0;\r\n        var encodedFractal = encodeList($('#fractal'));\r\n        var encodedColor = encodeList($('#color'));\r\n        var d = $('#draw-region').children().eq(0).val() + ',' + $('#draw-region').children().eq(1).val() + ',' + $('#draw-region').children().eq(2).val();\r\n        window.history.replaceState(null, null, \"?fractal=\" + encodedFractal + \"&draw=\" + d + \"&color=\" + encodedColor);\r\n    }\r\n}\r\n\r\nfunction makeTextChangesSave() {\r\n    $('input').bind('input', function () {\r\n        save();\r\n    });\r\n}\r\nmakeTextChangesSave();\r\n\r\nfunction encodeList(node) {\r\n    var encoded = '';\r\n    node.children().each(function () {\r\n        encoded += encodeNode($(this));\r\n    });\r\n    return encoded;\r\n}\r\n\r\nfunction encodeVector(node) {\r\n    return node.children().eq(0).val() + \",\" + node.children().eq(1).val() + \",\" + node.children().eq(2).val();\r\n}\r\n\r\nfunction decodeVector(node, vector) {\r\n    node.children().eq(0).val(vector[0]);\r\n    node.children().eq(1).val(vector[1]);\r\n    node.children().eq(2).val(vector[2]);\r\n}\r\nfunction encodeNode(node) {\r\n    var encoded;\r\n    var children = node.children();\r\n    switch (node.data('name')) {\r\n        case 'Rotate':\r\n            encoded = 'FR' + encodeVector(children.eq(1));\r\n            break;\r\n        case 'Repeat':\r\n            encoded = 'FC' + children.eq(0).children().eq(1).val();\r\n            encoded += encodeList(children.eq(1)) + 'FE';\r\n            break;\r\n        case 'Translate':\r\n            encoded = 'FT' + encodeVector(children.eq(1));\r\n            break;\r\n        // case 'Box':\r\n        //     encoded = 'FB' + encodeVector(children.eq(1));\r\n        //     encoded += ',' + encodeVector(children.eq(2));\r\n        //     break;\r\n        // case 'Sphere':\r\n        //     encoded = 'FS' + encodeVector(children.eq(1)) + ',' + children.eq(2).val();\r\n        //     break;\r\n        case 'Box_Fold':\r\n            encoded = 'FH' + children.eq(1).val();\r\n            break;\r\n        case 'Sphere_Fold':\r\n            encoded = 'FO' + children.eq(1).val() + ',' + children.eq(2).val();\r\n            break;\r\n        case 'Mandel':\r\n            encoded = 'FM' + children.eq(1).val();\r\n            break;\r\n        case 'Menger':\r\n            encoded = 'FA' + encodeVector(children.eq(1)) + ',' + children.eq(2).val();\r\n            break;\r\n        case 'Tetrahedral':\r\n            encoded = 'FW';\r\n            break;\r\n        case 'Scale':\r\n            encoded = 'FQ' + children.eq(1).val();\r\n            break;\r\n        case 'Orbit_Trap':\r\n            encoded = 'FB' + children.eq(0).children().eq(1).val() + ',' + children.eq(0).children().eq(2).val();\r\n            encoded += encodeList(children.eq(1)) + 'FX' + children.eq(0).children().eq(2).val();\r\n            break;\r\n    }\r\n    return encoded;\r\n}\r\nfunction decodeSave(saved, parentNode) {\r\n    for (var f of saved.split('F')) {\r\n        var newNode = null;\r\n        var nextParentNode = parentNode;\r\n        switch (f.charAt(0)) {\r\n            case 'R':\r\n                newNode = $(\".master[data-name='Rotate']\").clone().removeClass(\"master\");\r\n                decodeVector(newNode.children().eq(1), f.substring(1).split(','));\r\n                break;\r\n            case 'C':\r\n                newNode = $(\".master[data-name='Repeat']\").clone().removeClass(\"master\");\r\n                newNode.children().eq(0).children().eq(1).val(f.substring(1));\r\n                nextParentNode = newNode.find(\".codeblock-list-master\").removeClass(\"codeblock-list-master\").addClass(\"codeblock-list\");\r\n                break;\r\n            case 'E':\r\n                nextParentNode = parentNode.parent().closest('.codeblock-list');\r\n                break;\r\n            case 'T':\r\n                newNode = $(\".master[data-name='Translate']\").clone().removeClass(\"master\");\r\n                decodeVector(newNode.children().eq(1), f.substring(1).split(','));\r\n                break;\r\n            // case 'B':\r\n            //     newNode = $(\".master[data-name='Box']\").clone().removeClass(\"master\");\r\n            //     decodeVector(newNode.children().eq(1), f.substring(1).split(','));\r\n            //     decodeVector(newNode.children().eq(2), f.substring(1).split(',').slice(3));\r\n            //     break;\r\n            // case 'S':\r\n            //     newNode = $(\".master[data-name='Sphere']\").clone().removeClass(\"master\");\r\n            //     decodeVector(newNode.children().eq(1), f.substring(1).split(','));\r\n            //     newNode.children().eq(2).val(f.substring(1).split(',')[3]);\r\n            //     break;\r\n            case 'H':\r\n                newNode = $(\".master[data-name='Box_Fold']\").clone().removeClass(\"master\");\r\n                newNode.children().eq(1).val(f.substring(1));\r\n                break;\r\n            case 'O':\r\n                newNode = $(\".master[data-name='Sphere_Fold']\").clone().removeClass(\"master\");\r\n                newNode.children().eq(1).val(f.substring(1).split(',')[0]);\r\n                newNode.children().eq(2).val(f.substring(1).split(',')[1]);\r\n                break;\r\n            case 'M':\r\n                newNode = $(\".master[data-name='Mandel']\").clone().removeClass(\"master\");\r\n                newNode.children().eq(1).val(f.substring(1));\r\n                break;\r\n            case 'A':\r\n                newNode = $(\".master[data-name='Menger']\").clone().removeClass(\"master\");\r\n                decodeVector(newNode.children().eq(1), f.substring(1).split(','));\r\n                newNode.children().eq(2).val(f.substring(1).split(',')[3]);\r\n                break;\r\n            case 'W':\r\n                newNode = $(\".master[data-name='Tetrahedral']\").clone().removeClass(\"master\");\r\n                break;\r\n            case 'Q':\r\n                newNode = $(\".master[data-name='Scale']\").clone().removeClass(\"master\");\r\n                newNode.children().eq(1).val(f.substring(1));\r\n                break;\r\n            case 'B':\r\n                newNode = $(\".master[data-name='Orbit_Trap']\").clone().removeClass(\"master\");\r\n                newNode.children().eq(0).children().eq(1).val(f.substring(1).split(',')[0]);\r\n                newNode.children().eq(0).children().eq(2).val(f.substring(1).split(',')[1]);\r\n                nextParentNode = newNode.find(\".codeblock-list-master\").removeClass(\"codeblock-list-master\").addClass(\"codeblock-list\");\r\n                break;\r\n            case 'X':\r\n                nextParentNode = parentNode.parent().closest('.codeblock-list');\r\n                break;\r\n        }\r\n        if (newNode != null) {\r\n            parentNode.append(newNode);\r\n        }\r\n        parentNode = nextParentNode;\r\n    }\r\n    makeTextChangesSave();\r\n}\r\nfunction toFloats(p) {\r\n    var f = [];\r\n    for (var n = 0; n < p.length; n++) {\r\n        if (!p[n].includes('.')) {\r\n            f[n] = p[n] + '.0';\r\n        } else {\r\n            f[n] = p[n];\r\n        }\r\n    }\r\n    return f;\r\n}\r\nfunction toInts(p) {\r\n    var i = [];\r\n    for (var n = 0; n < p.length; n++) {\r\n        i[n] = p[n] | 0;\r\n    }\r\n    return i;\r\n}\r\nfunction codify(node) {\r\n    var code = '';\r\n    var encoded = encodeList(node);\r\n    for (var f_ of encoded.split('F')) {\r\n        var p = f_.substring(1).split(',');\r\n        var i = toInts(p);\r\n        var f = toFloats(p);\r\n        console.log(i);\r\n        console.log(f);\r\n\r\n        switch (f_.charAt(0)) {\r\n            case 'R':\r\n                code += `rotate(z,vec3(${f[0] * 0.0174533},${f[1] * 0.0174533},${f[2] * 0.0174533}));\\n`;\r\n                break;\r\n            case 'C':\r\n                code += `for(int i = 0; i < ${i[0]}; i++){\\n`;\r\n                break;\r\n            case 'E':\r\n                code += `}\\n`;\r\n                break;\r\n            case 'T':\r\n                code += `translate(z,vec3(${f[0]},${f[1]},${f[2]}));\\n`;\r\n                break;\r\n            // case 'B':\r\n            //     code += `return box(z.xyz,vec3(${f[0]},${f[1]},${f[2]}),vec3(${f[3]},${f[4]},${f[5]}))/abs(z.w);\\n`;\r\n            //     break;\r\n            // case 'S':\r\n            //     code += `return sphere(z.xyz,vec3(${f[0]},${f[1]},${f[2]}),${f[3]})/abs(z.w);\\n`;\r\n            //     break;\r\n            case 'H':\r\n                code += `box_fold(z,${f[0]});\\n`;\r\n                break;\r\n            case 'O':\r\n                code += `sphere_fold(z,${f[0]},${f[1]});\\n`;\r\n                break;\r\n            case 'M':\r\n                code += `mandel(z,pos,${f[0]});\\n`;\r\n                break;\r\n            case 'A':\r\n                code += `menger(z,vec3(${f[0]},${f[1]},${f[2]}),${f[3]});\\n`;\r\n                break;\r\n            case 'W':\r\n                code += `tetrahedral(z);\\n`;\r\n                break;\r\n            case 'Q':\r\n                code += `scale(z,${f[0]});\\n`;\r\n                break;\r\n            case 'B':\r\n                code += `for(int i = 0; i < ${i[0]}; i++){\\n`;\r\n                break;\r\n            case 'X':\r\n                code += `orbit = min(orbit, length(z.xyz));}\\n`;\r\n                code += `return hsv2rgb(vec3(abs(orbit / z.w) * ${f[0]}, 0.5, 0.5));`;\r\n                break;\r\n        }\r\n    }\r\n    return code;\r\n}\r\n\r\n//Dragging ====================\r\nvar dragging = null;\r\nvar dragStart = {};\r\nvar target;\r\nvar lastMouse = {};\r\nvar releasedIn;\r\nvar rawReleasedIn;\r\nfunction findObject(obj, searchClass, endClasses) {\r\n    var nUp = obj;\r\n    while (!nUp.hasClass(searchClass)) {\r\n        for (const _class of endClasses) {\r\n            if (nUp.hasClass(_class)) return null;\r\n        }\r\n        nUp = nUp.parent();\r\n        if (nUp.is(\"body\") || nUp.length == 0) return null;\r\n    }\r\n    return nUp;\r\n}\r\n\r\nfunction dragRelease() {\r\n    if (dragging == null) return;\r\n    dragging.css(\"z-index\", 12);\r\n    var copy;\r\n    if (lastMouse.awaitingMovement) {\r\n        $(\".selected\").removeClass(\"selected\");\r\n        if (!dragging.hasClass(\"master\")) {\r\n            dragging.addClass(\"selected\");\r\n        }\r\n    } else if (releasedIn != null) {\r\n        $(\".indicator\").after(dragging);\r\n        dragging.css(\"position\", \"unset\");\r\n        dragging.css(\"z-index\", \"unset\");\r\n\r\n    } else {\r\n        if (rawReleasedIn.attr(\"id\") == 'trash') {\r\n            dragging.remove();\r\n        }\r\n        if (rawReleasedIn.attr(\"id\") == 'copy') {\r\n            var copy = dragging.clone().css('top', parseInt(dragging.css('top')) - 10);\r\n            copy.css('left', parseInt(copy.css('left')) + 10);\r\n        }\r\n    }\r\n    $(\".codeblock-list\").removeClass(\"glow\");\r\n    $(\".indicator\").remove();\r\n    dragging.removeClass(\"invisible\");\r\n    $(\"body\")[0].onmousemove = null;\r\n    //$(\".codeblock:not(.master)\").css(\"z-index\", 11);\r\n    if (copy != null) {\r\n        copy.appendTo(dragging.parent());\r\n        copy.removeClass(\"invisible\");\r\n        copy.css(\"z-index\", 13);\r\n    }\r\n    dragging = null;\r\n    makeTextChangesSave();\r\n    save();\r\n}\r\n\r\nfunction placeIndicator(e, force = false) {\r\n    if (lastMouse.x != e.clientX || lastMouse.y != e.clientY) {\r\n        rawReleasedIn = target;\r\n        releasedIn = findObject(rawReleasedIn, \"codeblock-list\", [\"main\"]);\r\n        if (lastMouse.awaitingMovement) {\r\n            lastMouse.awaitingMovement = false;\r\n            dragging.css(\"position\", \"absolute\");\r\n            dragging.css(\"top\", dragStart.blockOffset.top);\r\n            dragging.css(\"left\", dragStart.blockOffset.left);\r\n            dragging.css(\"z-index\", 999);\r\n            dragging.appendTo($(\"body\"));\r\n        }\r\n        if (releasedIn != null) {\r\n            $(\".codeblock-list\").removeClass(\"glow\");\r\n            releasedIn.addClass(\"glow\");\r\n            var placed = false;\r\n            $(\".indicator\").remove();\r\n            releasedIn.children().each(function () {\r\n                if ($(this)[0] != dragging[0] && $(this).offset().top + $(this).height() / 2 > e.clientY) {\r\n                    placed = true;\r\n                    $(\"<div class='indicator'></div>\").insertBefore($(this));\r\n                    return false;\r\n                }\r\n            });\r\n            if (!placed) {\r\n                $(\"<div class='indicator'></div>\").appendTo(releasedIn);\r\n            }\r\n            $(\".indicator\").width(dragging.width());\r\n            $(\".indicator\").height(dragging.height() + 2);\r\n        } else {\r\n            $(\".indicator\").remove();\r\n            $(\".codeblock-list\").removeClass(\"glow\");\r\n        }\r\n    }\r\n}\r\n\r\n$(\"body\").mousedown((e) => {\r\n    releasedIn = null;\r\n    dragging = findObject($(e.target), \"codeblock\", [\"codeblock-numfield\", \"main\", \"codeblock-vector\"]);\r\n    if (dragging == null) {\r\n        $(\".selected\").removeClass(\"selected\");\r\n        return;\r\n    }\r\n    dragStart.blockOffset = dragging.offset();\r\n    dragStart.mouseX = e.clientX;\r\n    dragStart.mouseY = e.clientY;\r\n    lastMouse.awaitingMovement = true;\r\n    lastMouse.x = e.clientX;\r\n    lastMouse.y = e.clientY;\r\n    if (dragging.hasClass(\"master\")) {\r\n        dragging = dragging.clone().removeClass(\"master\");\r\n        dragging.find(\".codeblock-list-master\").removeClass(\"codeblock-list-master\").addClass(\"codeblock-list\");\r\n        makeTextChangesSave();\r\n    }\r\n    dragging.addClass(\"invisible\");\r\n\r\n    $(\"body\").mousemove(function (e) {\r\n        if (dragging == null) return;\r\n        target = $(e.target);\r\n        placeIndicator(e);\r\n        lastMouse.x = e.clientX;\r\n        lastMouse.y = e.clientY;\r\n        dragging.css(\"top\", e.clientY - dragStart.mouseY + dragStart.blockOffset.top);\r\n        dragging.css(\"left\", e.clientX - dragStart.mouseX + dragStart.blockOffset.left);\r\n    }).mouseup(dragRelease);\r\n});\r\n$(document).mouseleave(dragRelease);\r\n$(document).keyup(function (e) {\r\n    if (e.keyCode == 46) {\r\n        $(\".selected\").remove();\r\n    }\r\n});\r\n\r\n//LOAD SHADER=====================================\r\nfunction loadFromButton() {\r\n    $('#fractal').html('');\r\n    $('#color').html('');\r\n    decodeSave($('.list-button.active').data('fractal'), $('#fractal'));\r\n    decodeSave($('.list-button.active').data('color'), $('#color'));\r\n    var d = $('.list-button.active').data('draw');\r\n    if (d != undefined) {\r\n        d = d.split(',');\r\n        $('#draw-region').children().eq(0).val(d[0]);\r\n        $('#draw-region').children().eq(1).val(d[1]);\r\n        $('#draw-region').children().eq(2).val(d[2]);\r\n    }\r\n    save();\r\n    run();\r\n}\r\n$('.list-button').click(function () {\r\n    loadFromButton();\r\n});\r\nvar params = {};\r\nlocation.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (s, k, v) { params[k] = v })\r\nif (params.fractal == undefined) {\r\n    loadFromButton();\r\n} else {\r\n    decodeSave(params.fractal, $('#fractal'));\r\n    decodeSave(params.color, $('#color'));\r\n    var d = params.draw.split(',');\r\n    $('#draw-region').children().eq(0).val(d[0]);\r\n    $('#draw-region').children().eq(1).val(d[1]);\r\n    $('#draw-region').children().eq(2).val(d[2]);\r\n    run();\r\n}\r\n\r\n//CREATE SHADER=============================\r\n// var vShader = gl.createShader(gl.VERTEX_SHADER);\r\n// var fShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n// gl.shaderSource(vShader, vert);\r\n// gl.shaderSource(fShader, frag);\r\n// gl.compileShader(vShader);\r\n// gl.compileShader(fShader);\r\n// var compilationLog = gl.getShaderInfoLog(fShader);\r\n// console.log('Shader compiler log: ' + compilationLog);\r\n// var program = gl.createProgram();\r\n// gl.attachShader(program, vShader);\r\n// gl.attachShader(program, fShader);\r\n// gl.linkProgram(program);\r\n// //gl.deleteShader(vShader);\r\n// gl.deleteShader(fShader);\r\n// gl.useProgram(program);\r\n\r\n\r\n//CONTROLS ===========================================\r\ncanvas.onmousedown = function (event) {\r\n    var x = event.clientX;\r\n    var y = event.clientY;\r\n    var rect = event.target.getBoundingClientRect();\r\n    if (rect.left <= x && rect.right > x &&\r\n        rect.top <= y && rect.bottom > y) {\r\n        lastX = x;\r\n        lastY = y;\r\n        mouseDown = true;\r\n    }\r\n}\r\ncanvas.onmouseup = function (event) {\r\n    mouseDown = false;\r\n}\r\nfunction degToRad(d) {\r\n    return d * Math.PI / 180;\r\n}\r\ncanvas.onmousemove = function (event) {\r\n    var x = event.clientX;\r\n    var y = event.clientY;\r\n    if (mouseDown) {\r\n        yawAngle += (x - lastX) / 4;\r\n        pitchAngle += (y - lastY) / 4;\r\n        pitchAngle = Math.max(Math.min(pitchAngle, 89.999), -89.999);\r\n    }\r\n    lastX = x;\r\n    lastY = y;\r\n}\r\n\r\nvar speed_range = document.getElementById(\"speed\");\r\ndocument.onmousewheel = function (event) {\r\n    speed += Math.sign(event.wheelDelta);\r\n    speed = Math.max(Math.min(speed, 20), -40);\r\n    speed_range.value = Math.round(speed);\r\n}\r\nspeed_range.addEventListener('input', function () {\r\n    speed = parseInt(speed_range.value);\r\n});\r\ndocument.getElementById(\"detail\").addEventListener('input', function () {\r\n    gl.uniform1f(detail_location, Math.pow(10, -parseFloat(document.getElementById(\"detail\").value)));\r\n});\r\ndocument.getElementById(\"shadow\").addEventListener('input', function () {\r\n    gl.uniform1i(shadow_location, parseInt(document.getElementById(\"shadow\").value));\r\n});\r\ndocument.getElementById(\"render\").addEventListener('input', function () {\r\n    gl.uniform1i(render_location, parseInt(document.getElementById(\"render\").value));\r\n});\r\nwindow.addEventListener(\"keydown\", onKeyDown, false);\r\nwindow.addEventListener(\"keyup\", onKeyUp, false);\r\nfunction onKeyDown(event) {\r\n    var keyCode = event.keyCode;\r\n    switch (keyCode) {\r\n        case 68: //d\r\n            move[0] = 1;\r\n            break;\r\n        case 83: //s\r\n            move[2] = -1;\r\n            break;\r\n        case 65: //a\r\n            move[0] = -1;\r\n            break;\r\n        case 87: //w\r\n            move[2] = 1;\r\n            break;\r\n    }\r\n}\r\nfunction onKeyUp(event) {\r\n    var keyCode = event.keyCode;\r\n\r\n    switch (keyCode) {\r\n        case 68: //d\r\n            move[0] = 0;\r\n            break;\r\n        case 83: //s\r\n            move[2] = 0;\r\n            break;\r\n        case 65: //a\r\n            move[0] = 0;\r\n            break;\r\n        case 87: //w\r\n            move[2] = 0;\r\n            break;\r\n    }\r\n}\r\n\r\nfunction movement(deltaTime) {\r\n    var fwd = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 1);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.rotateX(fwd, fwd, [0, 0, 0], degToRad(-pitchAngle));\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.rotateY(fwd, fwd, [0, 0, 0], degToRad(-yawAngle));\r\n    var right = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 0, 0);\r\n    var up = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0)\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(right, up, fwd);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.normalize(right, right);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(up, right, fwd);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.normalize(up, up);\r\n\r\n    var rightMove = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\r\n    var rSpeed = Math.pow(10, speed / 10);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.scale(rightMove, right, move[0] * deltaTime * rSpeed);\r\n    var fwdMove = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.scale(fwdMove, fwd, move[2] * deltaTime * rSpeed);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.add(playerPos, playerPos, rightMove);\r\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.add(playerPos, playerPos, fwdMove);\r\n\r\n    gl.uniform3f(playerUp_location, up[0], up[1], up[2]);\r\n    gl.uniform3f(playerRight_location, right[0], right[1], right[2]);\r\n    gl.uniform3f(playerFwd_location, fwd[0], fwd[1], fwd[2]);\r\n    gl.uniform3f(playerPos_location, playerPos[0], playerPos[1], playerPos[2]);\r\n}\r\n\r\nvar start = Date.now();\r\nvar lastFrame = start;\r\nfunction render() {\r\n    var current = Date.now();\r\n    var elapsed = current - lastFrame;\r\n    saveTimer += elapsed;\r\n    lastFrame = current;\r\n    gl.uniform1f(time_location, current - start);\r\n    movement(elapsed / 1000);\r\n    document.getElementById(\"fps\").textContent = Math.round(1000 / elapsed);\r\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n\r\n    requestAnimationFrame(render, canvas);\r\n}\r\nrender();\r\n\n\n//# sourceURL=webpack://fractals/./src/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/app.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;